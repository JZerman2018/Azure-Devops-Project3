# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
    -  README.md
    - .gitignore
    - screenshots
name: Azure Pipelines
variables:
  python.version: '3.9.1'
stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadSecureFile@1
      inputs:
        secureFile: '.env'
# Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: '$(ssh_pub_key)'
        sshKeySecureFile: 'id_rsa'
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use Terraform latest'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformTaskV1@0
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'SPProject3-Terraform'
        backendAzureRmResourceGroupName: 'project3-tstate'
        backendAzureRmStorageAccountName: 'project3tstate'
        backendAzureRmKey: 'terraform.tfstate'
        backendAzureRmContainerName: 'tstate'
    - task: TerraformTaskV1@0
      displayName: 'terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'SPProject3-Terraform'
        runAzLogin: true
        secureVarsFile: 'terraform.tfvars'
        allowTelemetryCollection: true
    - task: TerraformCLI@0
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'SPProject3-Terraform'
        runAzLogin: true
        secureVarsFile: 'terraform.tfvars'
        commandOptions: '-auto-approve'
        allowTelemetryCollection: true
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    # Archive files
    # Compress files into .7z, .tar.gz, or .zip
    - task: ArchiveFiles@2
      displayName: 'Archive Automated Tests'
      inputs:
        rootFolderOrFile: 'automatedtesting' 
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip' 
- stage:
  jobs:
  - deployment: FakeRestAPI
    displayName: FakeRestAPI Deploy
    pool:
      vmImage: 'Ubuntu-latest'
    environment:
      name: 'TEST'
      resourceType: 'VirtualMachine'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'SPProject3-Terraform'
              appName: 'test-appservice-proj3'
              appType: webApp
              deploymentMethod: zipDeploy
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - deployment: TEST
    displayName: Deploy VM
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Artifact'
            inputs:
              artifact: 'drop-project'
              path: $(Build.SourcesDirectory)
    # # Bash
    # # Run a Bash script on macOS, Linux, or Windows
    # - task: Bash@3
    #   displayName: 'Run Postman Test'
    #   inputs:
    #     targetType: 'inline'
    #     script: |
    #       sudo npm install -g newman
    #       sudo newman run StarterAPIs.json -e StarterAPIEnvironment.postman_environment.json --reporters cli,junit --reporter-junit-export newmanReport.xml
    #       workingDirectory: $(System.DefaultWorkingDirectory)/automatedtesting/postman
    #     #failOnStderr: false # Optional
    #     #noProfile: true # Optional
    #     #noRc: true # Optional
    # - task: PublishTestResults@2
    #   inputs:
    #     testResultsFormat: 'JUnit'
    #     testResultsFiles: '*.xml'
    #     searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    #     mergeTestResults: true
    #     testRunTitle: 'Publish Postman Newman Results'
    

    
