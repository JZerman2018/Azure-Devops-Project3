# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
    -  README.md
    - .gitignore
    - screenshots
name: Azure Pipelines
variables:
  python.version: '3.9.1'
stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadSecureFile@1
      inputs:
        secureFile: '.env'
# Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: '$(ssh_pub_key)'
        sshKeySecureFile: 'id_rsa'
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use Terraform latest'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformTaskV1@0
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'SPProject3-Terraform'
        backendAzureRmResourceGroupName: 'project3-tstate'
        backendAzureRmStorageAccountName: 'project3tstate'
        backendAzureRmKey: 'terraform.tfstate'
        backendAzureRmContainerName: 'tstate'
    - task: TerraformTaskV1@0
      displayName: 'terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'SPProject3-Terraform'
        runAzLogin: true
        secureVarsFile: 'terraform.tfvars'
        allowTelemetryCollection: true
    - task: TerraformCLI@0
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'SPProject3-Terraform'
        runAzLogin: true
        secureVarsFile: 'terraform.tfvars'
        commandOptions: '-auto-approve'
        allowTelemetryCollection: true
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive Automated Tests'
      inputs:
        rootFolderOrFile: 'automatedtesting' 
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip' 
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip'
      displayName: 'Upload Test Package'
      artifact: drop-automatedtests
- stage:
  jobs:
  - deployment: TEST
    displayName: Deploy VM
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    pool:
      vmImage: 'Ubuntu-latest'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'SPProject3'
              appType: 'webAppLinux'
              WebAppName: 'test-appservice-proj3'
              deployToSlotOrASE: true
              ResourceGroupName: 'azuredevopsproj3'
              SlotName: 'production'
              packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                
                echo 'FakeRestAPI Running'
- stage: postDeployment
  displayName: 'Post-Deployment'
  pool:
      vmImage: 'Ubuntu-latest'
  jobs:
    - job: runnewman
      
      steps:
        - task: Bash@3
          displayName: 'Run Postman/Newman Tests'
          inputs:
            targetType: 'inline'
            script: |
              sudo npm install -g newman reporter
              echo 'Starting Tests...'
              echo 'Running Regression Test'
              newman run automatedtesting/postman/RegressionTest.postman_collection.json  --delay-request 15000 --reporters cli,junit 
              echo 'Running Data Validation Test'
              newman run automatedtesting/postman/DataValidation.postman_collection.json  --delay-request 12000 --reporters cli,junit
        - task: PublishTestResults@2
          displayName: 'Publish Postman Newman Results **/newman-*.xml'
          condition: always()
          inputs:
            testResultsFormat: 'JUnit'
            testRunTitle: Data and Regression Tests
            testResultsFiles: '**/newman-*.xml'
    - job: SeleniumTest
      steps:
      - publish: $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py
        artifact: selenium-python-file
      - download: current
        artifact: selenium-python-file
    # - deployment: DeploySeleniumOnVM
    #   displayName: 'Run Selenium'
    #   dependsOn: SeleniumTest
    #   environment:
    #     name: 'TEST'
    #     resourceType: VirtualMachine
    #   strategy:
    #     runOnce:
    #       deploy:
    #         steps:
    #         - download: current
    #           artifact: selenium-python-file
      - task: Bash@3
        displayName: 'Running Selenium Test'
        inputs:
          targetType: 'inline'
          script: |
                  pwd
                  sudo apt-get update -y
                  sudo apt-get install python3-pip -y
                  sudo apt-get install unzip -y
                  sudo apt-get install -y chromium-browser
                  sudo apt-get install -y chromium-chromedriver
                  pip3 install -U selenium                
                  sudo python3 $(Pipeline.Workspace)/selenium-python-file/login.py

            #--------------Archive Selenium-------------------------
        # - task: ArchiveFiles@2
        #   inputs:
        #     rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        #     includeRootFolder: false
        #     archiveType: 'zip'
        #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
        #     replaceExistingArchive: true
        # - task: PublishBuildArtifacts@1
        #   displayName: Upload Selenium Artifact
        #   inputs:
        #     targetPath: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
        #     artifactName: drop-selenium
              
              #------------------Selenium Test----------------------
        # - task: DownloadPipelineArtifact@2
        #   inputs:
        #     buildType: 'current'
        #     artifactName: 'drop-selenium'
        #     targetPath: '$(Pipeline.Workspace)/selenium'
        # - task: Bash@3
        #   displayName: Run Selenium Test
        #   inputs:
        #     targetType: 'inline'
        #     script: |
              #! /bin/bash

              #---------------Installing Dependencies------------------
              
              # pwd
              # sudo apt-get install python3-pip -y
              # sudo apt-get install unzip -y
              # sudo apt-get install -y chromium-browser
              # sudo apt-get install -y chromium-chromdriver
              # python3 -m pip install --upgrade pip
              # pip3 install -U selenium
            
              #-------------Installing Chromedriver--------------------
              #sudo chmod 755 /usr/bin/chromedriver
              # wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
              # unzip chromedriver_linux64.zip
              # sudo mv chromedriver -f /usr/bin
              # cd /usr/bin
              # sudo chmod a+x /usr/bin/chromedriver
              # rm -rf chromedriver_linux.zip
              # chromium-browser -version
              # chromedriver --version
              #---------------Running Selenium Test----------------------
        #       pwd
        #       ls
        #       cd automatedtesting/selenium
        #       pwd
        #       ls
        #       sudo python3 login.py 2>&1 | tee -a /selenium/seleniumlogfile.txt
        #       pwd
        #       ls -la
        # - task: PublishPipelineArtifact@1
        #   displayName: Publish Selenium Log
        #   inputs:
        #     targetPath: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium/seleniumlogfile.txt'
        #     artifact: 'drop-seleniumlog'




              # ---------------Agent Log Analytics------------------


              # export PATH=$PATH:/usr/bin/chromium-browser/
              
              # Install Log Analytics agent on Linux computers (only need to run once)
              # wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh
              # sh onboard_agent.sh -w ${AZURE_LOG_ANALYTICS_ID} -s ${AZURE_LOG_ANALYTICS_PRIMARY_KEY}
              # sudo /opt/microsoft/omsagent/bin/service_control restart ${AZURE_LOG_ANALYTICS_ID}
                # env:  # To use secret variables in a script, we must explicitly map them as environment variables.
                # AZURE_LOG_ANALYTICS_ID: $(AZURE_LOG_ANALYTICS_ID)
                # AZURE_LOG_ANALYTICS_PRIMARY_KEY: $(AZURE_LOG_ANALYTICS_PRIMARY_KEY)
                # displayName: Configure selenium

          
             

          
