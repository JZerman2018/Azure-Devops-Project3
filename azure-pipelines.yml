# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
    -  README.md
    - .gitignore
    - screenshots
name: Azure Pipelines
variables:
  python.version: '3.9.1'
stages:
- stage: Provision
  jobs:
  - job: provision_azure_infrastructure
    displayName: Provision Azure Infrastructure
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadSecureFile@1
      inputs:
        secureFile: '.env'
# Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'known_hosts'
        sshPublicKey: '$(ssh_pub_key)'
        sshKeySecureFile: 'id_rsa'
    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use Terraform latest'
      inputs:
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformTaskV1@0
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'SPProject3-Terraform'
        backendAzureRmResourceGroupName: 'project3-tstate'
        backendAzureRmStorageAccountName: 'project3tstate'
        backendAzureRmKey: 'terraform.tfstate'
        backendAzureRmContainerName: 'tstate'
    - task: TerraformTaskV1@0
      displayName: 'terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
    - task: TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'SPProject3-Terraform'
        runAzLogin: true
        secureVarsFile: 'terraform.tfvars'
        allowTelemetryCollection: true
    - task: TerraformCLI@0
      inputs:
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        environmentServiceName: 'SPProject3-Terraform'
        runAzLogin: true
        secureVarsFile: 'terraform.tfvars'
        commandOptions: '-auto-approve'
        allowTelemetryCollection: true
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive Automated Tests'
      inputs:
        rootFolderOrFile: 'automatedtesting' 
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip' 
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip'
      displayName: 'Upload Test Package'
      artifact: drop-automatedtests
- stage:
  jobs:
  - deployment: TEST
    displayName: Deploy VM
    environment:
      name: 'TEST'
      resourceType: VirtualMachine
    pool:
      vmImage: 'Ubuntu-latest'
    
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'SPProject3'
              appType: 'webAppLinux'
              WebAppName: 'test-appservice-proj3'
              deployToSlotOrASE: true
              ResourceGroupName: 'azuredevopsproj3'
              SlotName: 'production'
              packageForLinux: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # Write your commands here
                
                echo 'FakeRestAPI Running'
- stage: postDeployment
  displayName: 'Post-Deployment'
  pool:
      vmImage: 'Ubuntu-latest'
  jobs:
    - job: runnewman
      
      steps:
        - task: Bash@3
          displayName: 'Run Postman/Newman Tests'
          inputs:
            targetType: 'inline'
            script: |
              sudo npm install -g newman reporter
              echo 'Starting Tests...'
              echo 'Running Regression Test'
              newman run automatedtesting/postman/RegressionTest.postman_collection.json  --delay-request 15000 --reporters cli,junit --suppress-exit-code
              echo 'Running Data Validation Test'
              newman run automatedtesting/postman/DataValidation.postman_collection.json  --delay-request 12000 --reporters cli,junit --suppress-exit-code
        - task: PublishTestResults@2
          displayName: 'Publish Postman Newman Results **/newman-*.xml'
          condition: always()
          inputs:
            testResultsFormat: 'JUnit'
            testRunTitle: Data and Regression Tests
            testResultsFiles: '**/newman-*.xml'
    - job: SeleniumTest
      steps:
      - publish: $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py
        artifact: selenium-python-file
      - download: current
        artifact: selenium-python-file
      - task: Bash@3
        displayName: 'Running Selenium Test'
        inputs:
          targetType: 'inline'
          script: |
            pwd
            sudo apt-get update -y
            sudo apt-get install python3-pip -y
            sudo apt-get install unzip -y
            sudo apt-get install -y chromium-browser
            sudo apt-get install -y chromium-chromedriver
            sudo pip3 install -U selenium
            wget https://chromedriver.storage.googleapis.com/89.0.4389.23/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            sudo chmod a+x /etc/profile.d/env_vars.sh
            rm -rf chromedriver_linux.zip
            chromium-browser -version
            chromedriver --version
            sudo mkdir -p /var/logs/seleniumlogfile.txt
            sudo chmod 664 /var/logs/seleniumlogfile.txt
            sudo python3 -u $(Pipeline.Workspace)/selenium-python-file/login.py 2>&1 | sudo tee -a /var/logs/seleniumlogfile.txt
            cd $(System.DefaultWorkingDirectory)
            mkdir -p logs/selenium
            pwd
            cat seleniumlog.txt
            ls -la

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)/logs'
          artifact: 'Logs'
          publishLocation: 'pipeline'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)/seleniumlog.txt'
          artifact: 'Seleniumlog'
          publishLocation: 'pipeline'

              # ---------------Install Agent Log Analytics (Only run once-Comment Out)------------------
            #wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w f40f07f9-bb5e-42d3-9faf-74075e85ea64 -s FraMdkcW0KHGIa51yqTtisIXqKYLn+JLb5gexdgrLGYDIwZilHIuw7RYYO/7Bj/L9Z2Fax9Mmo8UZ/DJpXv2zQ== -d opinsights.azure.com
            #sudo /opt/microsoft/omsagent/bin/service_control restart f40f07f9-bb5e-42d3-9faf-74075e85ea64
    - job: JMeterTest
      displayName: Test JMeter
      steps:
      - task: Bash@3
        displayName: Install JMeter
        inputs:
          targetType: 'inline'
          script: |
            sudo apt-get install openjdk-11-jre-headless -y
            java -version
            wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz -O jmeter.tgz
            tar xzvf jmeter.tgz
            apache-jmeter-5.2.1/bin/jmeter --version
            pwd
            ls -la
      - task: Bash@3
        displayName: JMeter Stress Test
        inputs:
          targetType: 'inline'
          script: |
            sudo mkdir stresstest-html-report
            rm -rf *.csv stress-test-html-report/*
            echo "Running JMeter tests Now"
            apache-jmeter-5.2.1/bin/jmeter -n -t automatedtesting/jmeter/stresstest.jmx \
            -l StressTest_Results.csv -e -f -o stresstest-html-report/
      - task: Bash@3
        displayName: JMeter Endurance Test
        inputs:
          targetType: 'inline'
          script: |
            sudo mkdir endurancetest-html-report
            rm -rf *.csv endurancetest-html-report/*
            apache-jmeter-5.2.1/bin/jmeter -n -t automatedtesting/jmeter/endurancetest.jmx \
            -l EnduranceTest_Results.csv -e -f -o endurancetest-html-report/
